/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, { Component } from 'react';
import {
  AsyncStorage,
  Platform,
  StyleSheet,
  Text,
  View
} from 'react-native';
import {
  StackNavigator,
  TabNavigator
} from 'react-navigation';

import store from './store'
import { Provider } from 'react-redux'
import { connect } from 'react-redux'
import { changeLogout } from './actions/userAction'
import { changeVisible } from './actions/userAction'

import Quisioner from './components/screens/Quisioner';
import Register from './components/screens/Register';
import Login from './components/screens/Login';
import Dashboard from './components/screens/Dashboard';
import Suggestion from './components/screens/Suggestion';
import Profile from './components/screens/Profile';
import History from './components/screens/History';

import PushNotification from 'react-native-push-notification'

const NavigationBase = StackNavigator({
  Login: { screen: Login },
  Register: { screen: Register },
  Quisioner: { screen: Quisioner },
  Profile: { screen: Profile },
  History: { screen: History }
})

const NavigationTab = TabNavigator({
  Suggestion: { screen: Suggestion },
  Profile: { screen: Profile },
  History: { screen: History }
}, {
    tabBarPosition: 'bottom',
    animationEnabled: true,
    tabBarOptions: {
      backBehavior: 'none',
      showIcon: true,
      showLabel: true,
      labelStyle: {
        fontSize: 12,
        color: '#06a887'
      },
      style: {
        backgroundColor: '#ffffff',
        height: 60
      }
    }
  })

class App extends Component<{}> {

  constructor() {
    super()
    this.state = {
      token: '',
      waterRemainValue: ''
    }
  }

  // componentWillMount() {
  //
  //   PushNotification.configure({
  //
  //       onNotification: function(notification) {
  //         console.log( 'NOTIFICATION:', notification );
  //       },
  //       popInitialNotification: true,
  //       requestPermissions: true,
  //   })
  //
  //   PushNotification.localNotification({
  //
  //     id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
  //     ticker: "My Notification Ticker", // (optional)
  //     autoCancel: true, // (optional) default: true
  //     largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
  //     smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
  //     bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
  //     subText: "This is a subText", // (optional) default: none
  //     color: "red", // (optional) default: system default
  //     vibrate: true, // (optional) default: true
  //     vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
  //     tag: 'some_tag', // (optional) add tag to message
  //     group: "group", // (optional) add group to message
  //     ongoing: false, // (optional) set whether this is an "ongoing" notification
  //
  //     /* iOS and Android properties */
  //     title: "DriMer Notification", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
  //     playSound: true, // (optional) default: true
  //     soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
  //     number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
  //     actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
  //   });
  //
  //   PushNotification.localNotificationSchedule({
  //     // message: `Minum yok guys, sisa ${this.state.waterRemainValue} Liter lagi nih`, // (required)
  //     date: new Date(Date.now() + (300 * 1000)) // in 60 secs
  //   });
  // }

  componentDidMount() {
    AsyncStorage.getItem('drimerToken').then((value) => {
      console.log('yeah kena di app')
      console.log(value)
      if (value) {
        this.props.changeVisible()
      }
    })
    .catch((err) => {
      console.log(err)
    })

    // AsyncStorage.getItem('air')
    // .then(airValue => {
    //   if (!airValue) {
    //     this.setState({
    //       waterRemainValue: this.props.userWaterSuggest
    //     })
    //   } else {
    //     this.setState({
    //       waterRemainValue: airValue
    //     })
    //   }
    // })
    // .catch(e => console.error(e))
  }

  render() {
    if (this.props.userLoginRegisterVisible != '') {
      return [<NavigationTab key={Math.random()} />]
    } else {
      return [<NavigationBase key={Math.random()} />]
    }
  }
}

const styles = StyleSheet.create({
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});

const mapStateToProps = (state) => {
  return {
    userWaterSuggest: state.quisionerReducer.waterNeeds,
    userLoginRegisterVisible: state.userReducer.userLoginRegisterVisible
  }
}

const mapActionsToProps = (dispatch) => {
  return {
    changeLogout: () => dispatch(changeLogout()),
    changeVisible: () => dispatch(changeVisible())
  }
}

export default connect(mapStateToProps, mapActionsToProps)(App)
